{"name":"Bam","tagline":"a super simple deployment utility using rsync and git","body":"## Bam\r\n\r\nA super simple deployment utility, it's basically an opinionated abstraction of rsync served in a capistrano fashion. Capistrano is a super cool utility, I love it, I use it all the time. But for smaller projects (websites, sinatra apps, etc), I think it's simply overkill. The great thing about bam is that you don't need to learn another DSL, it's simply just ruby that you need to edit in the deploy file to configure your deployment recipe.\r\n\r\n### Installation\r\n\r\n    gem install bam\r\n    \r\n### Usage\r\n\r\n\r\n    cd into/your/project/root\r\n    bamify\r\n    # update the @server and @to variables in deploy.bam.rb file\r\n    # work on your project\r\n    bam\r\n\r\n### How deploy.bam.rb works\r\n\r\nAfter you run <code>bamify</code>, it generates a <code>deploy.bam.rb</code> file, which looks like:\r\n\r\n    # Bam Deploy File\r\n    # ---------------\r\n    # All you have to do is change all the variables below...\r\n    # the ip or hostname of the server, can use the following conventions for this variable:\r\n    #   - server_name # => if you have server_name setup in ~/.ssh/config\r\n    #   - username@host\r\n    @server = 'login@yourhost.com'\r\n    # the location on the server don't forget to append the slash/\r\n    # make sure that it's the parent folder that you are uploading to,\r\n    # for example:\r\n    #   instead of...\r\n    #     @to = '~/public_html/your_site/'\r\n    #   do...\r\n    #     @to = '~/public_html/'\r\n    @to = '~/location/to/your/web/site/or/app/'\r\n\r\n    # add list of file to always include in deployments\r\n    @always_include = %w()\r\n\r\n    # remote tasks : these are tasks that you want to run on the server\r\n    # @remote_tasks = { :restart_app => 'touch /my/cool/app/restart.txt' }\r\n    @remote_tasks = {}\r\n\r\n    # pre_deploy_tasks : These are things that you can run locally before deployment\r\n    # @pre_deploy_tasks = ['rm -rf cache/*']\r\n    @pre_deploy_tasks = []\r\n\r\n    # post_deploy_tasks : These are things that you can run locally before deployment\r\n    # @post_deploy_tasks = ['rm -rf cache/*']\r\n    @post_deploy_tasks = []\r\n\r\nSimply set <code>@server</code> to your hostname or ip of your server and set <code>@to</code> to the location\r\non the server where the your project is located, make sure that it's the parent folder (and don't forget to\r\nappend the slash '/'), so instead of <code>~/public_html/project_name/</code> you would do <code>~/public_html/</code>\r\n\r\n### Command line options\r\n\r\n```\r\n# pass the --help flag for all options\r\nbam --help\r\n```\r\n\r\n* --dry : execute a dry run\r\n* --deploy : runs the deployment, this is the default task\r\n* --version : prints the current version\r\n* --remote : execute a remote command, split multiple tasks with a ':'\r\n\r\n### Pre, Post and Remote Deployment Tasks\r\n\r\nYou can run pre, post and remote deployment tasks by assigning or setting the `@pre_deploy_tasks`, `@post_deploy_tasks` and `@remote_tasks` variables. Here's an example, note that `@remote_tasks` is a Hash:\r\n\r\n```\r\n@pre_deploy_tasks = ['rm -rf cache/*']\r\n@post_deploy_tasks = ['rm -rf log/*']\r\n@remote_tasks = {\r\n    :restart_app => \"touch /path/to/app/restart.txt\"\r\n}\r\n\r\n# run remote tasks in your pre or post tasks array by adding a remote:[task_name] in your array like:\r\n@post_deploy_tasks = ['rm-rf log/*', 'remote:restart_app']\r\n\r\n# execute remote tasks like:\r\nbam --remote restart_app\r\n```\r\n\r\n### Ignoring Files and Directories on Deployment\r\n\r\nWhat if you don't want to push certain files or directories to your host? Say you have log or tmp files that would otherwise take up space. Well if you use git, you don't have to worry simply add them to .gitignore and bam is smart enough to ignore those files on deploy as well. \r\n\r\n### Add exceptions to ignore list\r\n\r\nThere could be some situations where you wouldn't want to exclude all the entries in `.gitignore`, if that's the case, simply add those entries to the `@always_include` variable. Here's an example:\r\n\r\n```\r\n@always_include = %w(app.min.js dist.min.js)\r\n```\r\n\r\n### TODO\r\n\r\n- Add static revision history for integrated rollbacks\r\n- Maybe use choice or highline to prompt to fill in values?\r\n- Maybe add in remote tasks : DONE!\r\n\r\n\r\nCopyright (c) 2010 Vann Ek., released under the MIT license","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}